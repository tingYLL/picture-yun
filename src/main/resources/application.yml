server:
  port: 8123
  servlet:
    context-path: /api
spring:
#  profiles:
#    active: local
  application:
    name: jdjm-picture-backend
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/bear_picture_test
    username: root
    password: root
  #Redis配置
  redis:
    database: 0
    host: 127.0.0.1
    port: 6379
    timeout: 5000
  servlet:
    multipart:
      max-file-size: 10MB
  # 空间图片分表
  shardingsphere:
    datasource:
      names: bear_picture
      bear_picture:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/bear_picture
        username: root
        password: root
    rules:
      sharding:
        tables:
          picture:
            actual-data-nodes: bear_picture.picture # 动态分表,如果是静态分表actual-data-nodes 这一项可以写成 bear_picture.picture{0..2}这种形式
            table-strategy:
              standard:
                sharding-column: spaceId
                sharding-algorithm-name: picture_sharding_algorithm  # 使用自定义分片算法
        sharding-algorithms:
          picture_sharding_algorithm:
            type: CLASS_BASED
            props:
              strategy: standard
              algorithmClassName: com.jdjm.jdjmpicturebackend.manager.sharding.PictureShardingAlgorithm
    props:
      sql-show: true
mybatis-plus:
  configuration:
    # MyBatis 配置
    map-underscore-to-camel-case: false
    #  仅在开发环境中打印出sql日志
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      logic-delete-field: isDelete
      logic-delete-value: 1
      logic-not-delete-value: 0
    enable-sql-runner: true
#访问路径 /api/doc.html
knife4j:
  enable: true
  openapi:
    title: 接口文档
    version: v1.0
    license: Apache 2.0
    license-url: https://stackoverflow.com/
    terms-of-service-url: https://stackoverflow.com/
    group:
      default:
        api-rule: package
        api-rule-resources:
          - com.jdjm.jdjmpicturebackend.controller

#本机存储路径
image:
#  是否开启本机存储
  local:
    enable: true
  upload:
    dir: D:\pictures

## 对象存储配置（需要从腾讯云获取）
#cos:
#  client:
#    host: xxx
#    secretId: xxx
#    secretKey: xxx
#    region: xxx
#    bucket: xxx

# 阿里云AI配置
aliYunAi:
  apiKey: your-api-key-here

